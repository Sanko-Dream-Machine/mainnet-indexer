# Â© 2023 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.

# This AWS Content is provided subject to the terms of the AWS Customer Agreement
# available at http://aws.amazon.com/agreement or other written agreement between
# Customer and either Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Contract @entity {
  id: Bytes! # address
  name: String!
  symbol: String!
  tokens: [Token!]! @derivedFrom(field: "contract")
}

type Token @entity {
  id: Bytes!
  tokenId: BigInt!
  uri: String!
  ipfsUri: TokenMetadata
  mintTx: Transfer
  owner: Account!
  contract: Contract!
  updatedAtTimestamp: BigInt!
  previousOwners: [PrevTokenAccount!]! @derivedFrom(field: "token")
}

type PrevTokenAccount @entity {
  id: Bytes! # Set to `account.id.concat(token.id)`
  account: Account!
  token: Token!
}

type TokenMetadata @entity {
  id: String!
  image: String!
  attributes: [Attribute!]!
}

type Attribute @entity {
  id: String!
  key: String!
  value: String!
}

type Account @entity {
  id: Bytes! # address
  tokens: [Token!]! @derivedFrom(field: "owner")
}
